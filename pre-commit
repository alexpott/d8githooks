#!/bin/bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
if git rev-parse --verify HEAD >/dev/null 2>&1
then
    AGAINST=HEAD
else
    # Initial commit: diff against an empty tree object
    AGAINST=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Function to test for command dependencies.
command_exists () {
    type "$1" &> /dev/null ;
}

# Ensure we have all the external tools we need
if ! command_exists yarn ; then
  echo "yarn not installed, for instructions visit https://yarnpkg.com/lang/en/docs/install"
  exit 1
fi
if ! command_exists composer ; then
  echo "composer not installed, for instructions visit https://getcomposer.org/"
  exit 1
fi

FILES=$(git diff --cached --name-only $AGAINST);
TOP_LEVEL=$(git rev-parse --show-toplevel);

# Ensure we have the correct versions of all the things.
cd $TOP_LEVEL
composer install
cd "$TOP_LEVEL/core"
yarn install
cd $TOP_LEVEL

# Standard checks against all files in commit.
for FILE in $FILES; do
    # Ensure the file still exists (i.e. is not being deleted).
    if [ -a $FILE ] ; then
      if [ ${FILE: -3} != ".sh" ] ; then
        # Ensure we have the correct file permissions
        STAT="$(stat -f  "%A" $FILE 2>/dev/null)"
        if [ $? -ne 0 ]; then
          STAT="$(stat -c  "%a" $FILE 2>/dev/null)"
        fi
        if [ "$STAT" -ne "644" ] ; then
            echo "git pre-commit check failed: file $FILE should be 644 not $STAT"
            STATUS=1
        fi
      fi
    fi
    # Don't commit changes to vendor.
    if [[ "$FILE" =~ ^vendor/ ]]; then
      echo "git pre-commit check failed: file in vendor directory being committed ($FILE). Copy the example.gitignore to .gitignore in Drupal root and unstage any changes in vendor."
      STATUS=1
    fi
    # Don't commit changes to core/node_modules.
    if [[ "$FILE" =~ ^core/node_modules/ ]]; then
      echo "git pre-commit check failed: file in core/node_modules directory being committed ($FILE)"
      STATUS=1
    fi
done

# Test files with phpcs rules.
for FILE in $FILES; do
    if [[ -f "$TOP_LEVEL/$FILE" ]] && [[ $FILE =~ \.(inc|install|module|php|profile|test|theme)$ ]]; then
        vendor/bin/phpcs "$TOP_LEVEL/$FILE" --standard="$TOP_LEVEL/core/phpcs.xml.dist"
        PHPCS=$?
        if [ "$PHPCS" -ne "0" ] ; then
            # If there are failures set the status to a number other than 0.
            STATUS=1
        else
            echo -e "PHPCS: $FILE \033[42;30mpassed\033[0m"
        fi

    fi
done

for FILE in $FILES; do
    # If the file is a JS the return will be 0 if not 1
    echo "$FILE" | grep -q "\.js$"
    ISJS=$?
    if [ -a $FILE -a "$ISJS" == "0" ] ; then
        core/node_modules/.bin/eslint $FILE
        ESLINT=$?
        if [ "$ESLINT" -ne "0" ] ; then
            # If there are failures set the status to a number other than 0.
            STATUS=1
        else
            echo -e "ESLINT: $FILE \033[42;30mpassed\033[0m"
        fi
    fi
done

exit $STATUS
